#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('h-enemy-gs:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * web socket
 */
var io = require('socket.io')(server);
var redis = require('redis');
var client = redis.createClient(process.env.REDIS_URL);
var game_id = 1;
var game_key = {};

io.sockets.on('connection', function (socket) {

  // connected game client
  socket.on("gameConnected", async token => {
    const game_data = JSON.stringify({
      'socket_id': socket.id,
      'game_id': game_id++,
    });
    await client.set(token, game_data);
    game_key[token] = socket.id;
    socket.emit('gameConnectNotice', { 'socket_id': socket.id });
    console.log(`game : ${socket.id} connected`);
  });

  socket.on("playerConnected", async token => {
    if (game_key[token]) {
      socket.emit('playerConnectNotice', { 'socket_id': game_key[token] });
      socket.to(game_key[token]).emit('playerAddNotice', { 'player_socket_id': socket.id });
      console.log(`player : ${socket.id} connected`);
    } else {
      console.log('idがありません');
      socket.emit('playerConnectNotice', { 'socket_id': false });
    }
  })

  socket.on("playerAction", function (socket_id, data) {
    socket.to(socket_id).emit('playerActionNotice', { 'player_socket_id': socket.id, 'message': data });
    //console.log(`player ${socket.id} action`);
  });

});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}